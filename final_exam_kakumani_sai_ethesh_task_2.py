# -*- coding: utf-8 -*-
"""Final_Exam_Kakumani_Sai_Ethesh_Task_2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19z8E-CGKPkWw_FM17x8x3R3mWXEysqVo
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
!pip install matplotlib-venn
!apt-get -qq install -y libfluidsynth1
# https://pypi.python.org/pypi/libarchive
!apt-get -qq install -y libarchive-dev && pip install -U libarchive
import libarchive
# https://pypi.python.org/pypi/pydot
!apt-get -qq install -y graphviz && pip install pydot
import pydot
!pip install cartopy
import cartopy
!pip install streamlit
import streamlit as st

df = pd.read_csv('/content/Sai Ethesh KAKUMANI - Sai Ethesh KAKUMANI.csv')
print("Dataset loaded successfully.")

print("\n--- Initial data exploration ---") #  Initial EDA (Exploratory Data Analysis)
print("\nFirst 5 rows of the DataFrame:")
display(df.head())

print("\nInformation about the DataFrame (data types and non-null counts):")
print(df.info())

print("\nMissing values in each column before processing:")
print(df.isnull().sum())

print("\nDescriptive statistics for numerical and categorical columns:")
display(df.describe(include='all'))

#  Data Preprocessing and Cleaning
# Check rows where 'Total Charges' is null (these also have 0 Tenure Months)
print("\n--- Data Preprocessing ---")
print("\nChecking rows where 'Total Charges' is null :")
print(df[df['Total Charges'].isnull()])

# Fill missing 'Total Charges' with 0, assuming new customers with no charges yet
df['Total Charges'].fillna(0, inplace=True)
print("\nMissing values in 'Total Charges' after filling with 0:")
print(df['Total Charges'].isnull().sum())

# Convert 'Total Charges' to numeric, as it was object type initially with missing values
# (Even if info() showed it as float, this step ensures proper numeric type after fillna fun())
df['Total Charges'] = pd.to_numeric(df['Total Charges'])
print("\n'Total Charges' column converted to numeric type.")


# Identify and drop unnecessary/constant columns that do not add value to the analysis
columns_to_drop = ['Count', 'Country', 'State', 'Lat Long', 'CustomerID']
df.drop(columns=columns_to_drop, inplace=True)
print(f"\nColumns dropped: {columns_to_drop}")
print("\nDataFrame columns after dropping:")
print(df.columns)

#  Data Analysis and Visualization
print("\n--- Data Analysis and Visualization ---")

# Set up the plotting style for better aesthetics
sns.set_style("whitegrid")

# Chart 1: Distribution of Churn (Bar Chart)
plt.figure(figsize=(7, 5))
sns.countplot(data=df, x='Churn Label', palette='viridis')
plt.title('Distribution of Customer Churn')
plt.xlabel('Churn Status')
plt.ylabel('Number of Customers')
plt.show()
print("Generated 'Distribution of Customer Churn' bar chart.")

# Chart 2: Distribution of Tenure Months (Histogram)
plt.figure(figsize=(10, 6))
sns.histplot(df['Tenure Months'], bins=30, kde=True, color='skyblue')
plt.title('Distribution of Customer Tenure Months')
plt.xlabel('Tenure Months')
plt.ylabel('Number of Customers')
plt.show()
print("Generated 'Distribution of Customer Tenure Months' histogram.")

# Chart 3: Distribution of Monthly Charges (Histogram)
plt.figure(figsize=(10, 6))
sns.histplot(df['Monthly Charges'], bins=30, kde=True, color='lightcoral')
plt.title('Distribution of Monthly Charges')
plt.xlabel('Monthly Charges ($)')
plt.ylabel('Number of Customers')
plt.show()
print("Generated 'Distribution of Monthly Charges' histogram.")

# Chart 4: Churn by Contract Type (Bar Chart)
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='Contract', hue='Churn Label', palette='magma')
plt.title('Customer Churn by Contract Type')
plt.xlabel('Contract Type')
plt.ylabel('Number of Customers')
plt.show()
print("Generated 'Customer Churn by Contract Type' bar chart.")

# Chart 5: Monthly Charges by Churn Status (Box Plot)
plt.figure(figsize=(8, 6))
sns.boxplot(data=df, x='Churn Label', y='Monthly Charges', palette='coolwarm')
plt.title('Monthly Charges Distribution by Churn Status')
plt.xlabel('Churn Status')
plt.ylabel('Monthly Charges ($)')
plt.show()
print("Generated 'Monthly Charges Distribution by Churn Status' box plot.")

# Create a scatter plot of Tenure Months vs. Monthly Charges, colored by Churn Label
plt.figure(figsize=(10, 7))
sns.scatterplot(data=df, x='Tenure Months', y='Monthly Charges', hue='Churn Label', palette='coolwarm', alpha=0.7)
plt.title('Monthly Charges vs. Tenure Months by Churn Status')
plt.xlabel('Tenure Months')
plt.ylabel('Monthly Charges ($)')
plt.show()

# Key Insights
  #-- churn means when customers stop using a company's service.
  # reasons are : prices were too high, competitors giving better deals and bad service or bad connections.
  # Customers who left were paying $89/month on average

  # Conclusion:
  #the company using heavy prices and with bad service or/and bad connectivity or even competitors providing better deals or plans.
  # New customers and fiber user to cancel their plans most.
  # Recommendations: Better to keep their prices fair and improve service and make their users happy and make sure that become loyal customers to that company.